{"version":3,"file":"core.cjs.production.min.js","sources":["../src/store/actions.ts","../src/components/Accessibility/defaults.ts","../src/utilities/other/getValueIndex.ts","../src/utilities/other/noop.ts","../src/store/context.ts","../src/utilities/coordinates/centerOfRectangle.ts","../src/utilities/coordinates/constants.ts","../src/utilities/coordinates/distanceBetweenPoints.ts","../src/utilities/coordinates/getEventCoordinates.ts","../src/utilities/event/isTouchEvent.ts","../src/utilities/event/isMouseEvent.ts","../src/utilities/coordinates/getRelativeTransformOrigin.ts","../src/utilities/rect/rectAdjustment.ts","../src/types/direction.ts","../src/utilities/scroll/getScrollableAncestors.ts","../src/utilities/scroll/isScrollable.ts","../src/utilities/position/isFixed.ts","../src/utilities/scroll/getScrollableElement.ts","../src/utilities/scroll/getScrollCoordinates.ts","../src/utilities/scroll/getScrollPosition.ts","../src/utilities/scroll/getScrollDirectionAndSpeed.ts","../src/utilities/scroll/documentScrollingElement.ts","../src/utilities/scroll/getScrollOffsets.ts","../src/utilities/rect/getRect.ts","../src/utilities/rect/isViewRect.ts","../src/utilities/algorithms/closestCorners.ts","../src/utilities/algorithms/rectIntersection.ts","../src/utilities/document/getOwnerDocument.ts","../src/store/reducer.ts","../src/utilities/other/omit.ts","../src/components/Accessibility/Accessibility.tsx","../src/hooks/utilities/useLayoutRectMap.ts","../src/hooks/utilities/useScrollableAncestors.ts","../src/hooks/utilities/useRect.ts","../src/sensors/keyboard/types.ts","../src/sensors/utilities/Listeners.ts","../src/sensors/pointer/AbstractPointerSensor.ts","../src/sensors/keyboard/defaults.ts","../src/sensors/keyboard/KeyboardSensor.ts","../src/sensors/utilities/getEventListenerTarget.ts","../src/sensors/pointer/PointerSensor.ts","../src/sensors/mouse/MouseSensor.ts","../src/sensors/touch/TouchSensor.ts","../src/modifiers/applyModifiers.ts","../src/components/DndContext/DndContext.tsx","../src/utilities/rect/getRectDelta.ts","../src/hooks/utilities/useCachedNode.ts","../src/hooks/utilities/useFindElementFromPoint.ts","../src/hooks/utilities/useScrollOffsets.ts","../src/utilities/rect/adjustScale.ts","../src/hooks/utilities/useCombineActivators.ts","../src/hooks/utilities/useAutoScroller.ts","../src/hooks/useDraggable.ts","../src/hooks/useDndContext.ts","../src/hooks/useDroppable.ts","../src/components/DragOverlay/DragOverlay.tsx","../src/components/DragOverlay/hooks/useDerivedTransform.ts","../src/components/DragOverlay/hooks/useDropAnimation.ts","../src/utilities/algorithms/closestCenter.ts","../src/hooks/utilities/useSyntheticListeners.ts","../src/sensors/useSensor.ts","../src/sensors/useSensors.ts"],"sourcesContent":["import type {Coordinates, UniqueIdentifier} from '../types';\nimport type {DroppableContainer} from './types';\n\nexport enum Action {\n  DragStart = 'dragStart',\n  DragMove = 'dragMove',\n  DragEnd = 'dragEnd',\n  DragCancel = 'dragCancel',\n  RegisterDroppable = 'registerDroppable',\n  SetDroppableDisabled = 'setDroppableDisabled',\n  UnregisterDroppable = 'unregisterDroppable',\n}\n\nexport type Actions =\n  | {\n      type: Action.DragStart;\n      active: UniqueIdentifier;\n      initialCoordinates: Coordinates;\n    }\n  | {type: Action.DragMove; coordinates: Coordinates}\n  | {type: Action.DragEnd}\n  | {type: Action.DragCancel}\n  | {\n      type: Action.RegisterDroppable;\n      element: DroppableContainer;\n    }\n  | {\n      type: Action.SetDroppableDisabled;\n      id: UniqueIdentifier;\n      disabled: boolean;\n    }\n  | {\n      type: Action.UnregisterDroppable;\n      id: UniqueIdentifier;\n    };\n","import {Announcements, ScreenReaderInstructions} from './types';\n\nexport const screenReaderInstructions: ScreenReaderInstructions = {\n  draggable: `\n    To pick up a draggable item, press the space bar.\n    While dragging, use the arrow keys to move the item.\n    Press space again to drop the item in its new position, or press escape to cancel.\n  `,\n};\n\nexport const defaultAnnouncements: Announcements = {\n  onDragStart(id) {\n    return `Picked up draggable item ${id}.`;\n  },\n  onDragOver(id, overId) {\n    if (overId) {\n      return `Draggable item ${id} was moved over droppable area ${overId}.`;\n    }\n\n    return `Draggable item ${id} is no longer over a droppable area.`;\n  },\n  onDragEnd(id, overId) {\n    if (overId) {\n      return `Draggable item ${id} was dropped over droppable area ${overId}`;\n    }\n\n    return `Draggable item ${id} was dropped.`;\n  },\n  onDragCancel(id) {\n    return `Dragging was cancelled. Draggable item ${id} was dropped.`;\n  },\n};\n","export const getMaxValueIndex = (array: number[]) =>\n  getValueIndex(array, (value, tracked) => value > tracked);\n\nexport const getMinValueIndex = (array: number[]) =>\n  getValueIndex(array, (value, tracked) => value < tracked);\n\n/**\n * Returns the index of the smallest number in an array of numbers\n */\nexport function getValueIndex(\n  array: number[],\n  comparator: (value: number, tracked: number) => boolean\n) {\n  if (array.length === 0) {\n    return -1;\n  }\n\n  let tracked = array[0];\n  let index = 0;\n\n  for (var i = 1; i < array.length; i++) {\n    if (comparator(array[i], tracked)) {\n      index = i;\n      tracked = array[i];\n    }\n  }\n\n  return index;\n}\n","export function noop(..._args: any) {}\n","import {createContext} from 'react';\n\nimport {noop} from '../utilities/other';\nimport {DndContextDescriptor} from './types';\n\nexport const Context = createContext<DndContextDescriptor>({\n  activatorEvent: null,\n  active: null,\n  activeNode: null,\n  activeNodeRect: null,\n  activeNodeClientRect: null,\n  activators: [],\n  ariaDescribedById: {\n    draggable: '',\n  },\n  overlayNode: {\n    nodeRef: {\n      current: null,\n    },\n    rect: null,\n    setRef: noop,\n  },\n  containerNodeRect: null,\n  dispatch: noop,\n  draggableNodes: {},\n  droppableRects: new Map(),\n  droppableContainers: {},\n  over: null,\n  scrollableAncestors: [],\n  scrollableAncestorRects: [],\n  recomputeLayouts: noop,\n  windowRect: null,\n  willRecomputeLayouts: false,\n});\n","import type {Coordinates, LayoutRect} from '../../types';\n\n/**\n * Returns the coordinates of the center of a given ClientRect\n */\nexport function centerOfRectangle(\n  rect: LayoutRect,\n  left = rect.offsetLeft,\n  top = rect.offsetTop\n): Coordinates {\n  return {\n    x: left + rect.width * 0.5,\n    y: top + rect.height * 0.5,\n  };\n}\n","import {Coordinates} from '../../types';\n\nexport const defaultCoordinates: Coordinates = Object.freeze({\n  x: 0,\n  y: 0,\n});\n","import {Coordinates} from '../../types';\n\n/**\n * Returns the distance between two points\n */\nexport function distanceBetween(p1: Coordinates, p2: Coordinates) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\n","import {Coordinates} from '../../types';\nimport {isMouseEvent, isTouchEvent} from '../event';\n\n/**\n * Returns the normalized x and y coordinates for mouse and touch events.\n */\nexport function getEventCoordinates(event: Event): Coordinates {\n  if (isTouchEvent(event)) {\n    if (event.touches && event.touches.length) {\n      const {clientX: x, clientY: y} = event.touches[0];\n\n      return {\n        x,\n        y,\n      };\n    } else if (event.changedTouches && event.changedTouches.length) {\n      const {clientX: x, clientY: y} = event.changedTouches[0];\n\n      return {\n        x,\n        y,\n      };\n    }\n  }\n\n  if (isMouseEvent(event)) {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n  };\n}\n","export function isTouchEvent(event: Event): event is TouchEvent {\n  return window?.TouchEvent && event instanceof TouchEvent;\n}\n","export function isMouseEvent(event: Event): event is MouseEvent {\n  return (\n    (window?.MouseEvent && event instanceof MouseEvent) ||\n    event.type.includes('mouse')\n  );\n}\n","import {getEventCoordinates} from './getEventCoordinates';\n\nexport function getRelativeTransformOrigin(\n  event: MouseEvent | TouchEvent | KeyboardEvent,\n  rect: ClientRect\n) {\n  if (event instanceof KeyboardEvent) {\n    return '0 0';\n  }\n\n  const eventCoordinates = getEventCoordinates(event);\n  const transformOrigin = {\n    x: ((eventCoordinates.x - rect.left) / rect.width) * 100,\n    y: ((eventCoordinates.y - rect.top) / rect.height) * 100,\n  };\n\n  return `${transformOrigin.x}% ${transformOrigin.y}%`;\n}\n","import {Coordinates, ViewRect} from '../../types';\n\nexport function createRectAdjustmentFn(modifier: number) {\n  return function adjustViewRect(\n    viewRect: ViewRect,\n    ...adjustments: Coordinates[]\n  ): ViewRect {\n    return adjustments.reduce<ViewRect>(\n      (acc, adjustment) => ({\n        ...acc,\n        top: acc.top + modifier * adjustment.y,\n        bottom: acc.bottom + modifier * adjustment.y,\n        left: acc.left + modifier * adjustment.x,\n        right: acc.right + modifier * adjustment.x,\n        offsetLeft: acc.offsetLeft + modifier * adjustment.x,\n        offsetTop: acc.offsetTop + modifier * adjustment.y,\n      }),\n      {...viewRect}\n    );\n  };\n}\n\nexport const getAdjustedRect = createRectAdjustmentFn(1);\n","export enum Direction {\n  Forward = 1,\n  Backward = -1,\n}\n","import { isScrollable } from './isScrollable';\nimport { isFixed } from '../position/isFixed'\n\nexport function getScrollableAncestors(element: Node | null): Element[] {\n  const scrollParents: Element[] = [];\n\n  function findScrollableAncestors(node: Node | null): Element[] {\n    if (!node) {\n      return scrollParents;\n    }\n\n    if (node instanceof Document && node.scrollingElement != null) {\n      scrollParents.push(node.scrollingElement);\n\n      return scrollParents;\n    }\n\n    if (!(node instanceof HTMLElement) || node instanceof SVGElement) {\n      return scrollParents;\n    }\n\n    if (isScrollable(node)) {\n      // crazy stupid hotfix for positioning issue under fixed scroll ancestors. get offsetTop of the first ancestor only(!)\n      if (node && isFixed(node)) {\n        return [node]\n      }\n      scrollParents.push(node);\n    }\n\n    return findScrollableAncestors(node.parentNode);\n  }\n\n  return element ? findScrollableAncestors(element) : scrollParents;\n}\n","export function isScrollable(node: HTMLElement): boolean {\n  const computedStyle = window.getComputedStyle(node);\n  const overflowRegex = /(auto|scroll)/;\n  const properties = ['overflow', 'overflowX', 'overflowY'];\n\n  return (\n    properties.find((property) => {\n      const value = computedStyle[property as keyof CSSStyleDeclaration];\n\n      return typeof value === 'string' ? overflowRegex.test(value) : false;\n    }) != null\n  );\n}\n","export const isFixed = (elem: HTMLElement) => {\n    let currentElement: HTMLElement | null = elem\n    let fixed = false\n    while (currentElement) {\n        fixed = getComputedStyle(currentElement)?.position === 'fixed'\n        // ignore fixed elements for body and above.\n        if (currentElement === document.body) {\n            return false\n        }\n        if (fixed) {\n            break\n        }\n        currentElement = currentElement?.parentElement\n    }\n\n    return fixed\n}","import {canUseDOM} from '@dnd-kit/utilities';\n\nexport function getScrollableElement(element: EventTarget | null) {\n  if (!canUseDOM) {\n    return null;\n  }\n\n  if (element === document.scrollingElement || element instanceof Document) {\n    return window;\n  }\n\n  if (element instanceof HTMLElement) {\n    return element;\n  }\n\n  return null;\n}\n","import {Coordinates} from '../../types';\n\nexport function getScrollCoordinates(\n  element: Element | typeof window\n): Coordinates {\n  if (element instanceof Window) {\n    return {\n      x: element.scrollX,\n      y: element.scrollY,\n    };\n  }\n\n  return {\n    x: element.scrollLeft,\n    y: element.scrollTop,\n  };\n}\n","function getScrollElementRect(element: Element) {\n  if (element === document.scrollingElement) {\n    const {innerWidth, innerHeight} = window;\n\n    return {\n      top: 0,\n      left: 0,\n      right: innerWidth,\n      bottom: innerHeight,\n      width: innerWidth,\n      height: innerHeight,\n    };\n  }\n\n  return element.getBoundingClientRect();\n}\n\nexport function getScrollPosition(scrollingContainer: Element) {\n  const scrollElementRect = getScrollElementRect(scrollingContainer);\n  const minScroll = {\n    x: 0,\n    y: 0,\n  };\n  const maxScroll = {\n    x: scrollingContainer.scrollWidth - scrollElementRect.width,\n    y: scrollingContainer.scrollHeight - scrollElementRect.height,\n  };\n\n  const isTop = scrollingContainer.scrollTop <= minScroll.y;\n  const isLeft = scrollingContainer.scrollLeft <= minScroll.x;\n  const isBottom = scrollingContainer.scrollTop >= maxScroll.y;\n  const isRight = scrollingContainer.scrollLeft >= maxScroll.x;\n\n  return {\n    isTop,\n    isLeft,\n    isBottom,\n    isRight,\n    scrollElementRect,\n    maxScroll,\n    minScroll,\n  };\n}\n","import {Direction, ViewRect} from '../../types';\nimport {getScrollPosition} from './getScrollPosition';\nimport {isDocumentScrollingElement} from './documentScrollingElement';\n\nexport function getScrollDirectionAndSpeed(\n  scrollContainer: Element,\n  scrollContainerRect: ViewRect,\n  rect: ViewRect,\n  acceleration = 10\n) {\n  const {clientHeight, clientWidth} = scrollContainer;\n  const finalScrollContainerRect = isDocumentScrollingElement(scrollContainer)\n    ? {\n        top: 0,\n        left: 0,\n        right: clientWidth,\n        bottom: clientHeight,\n      }\n    : scrollContainerRect;\n  const {isTop, isBottom, isLeft, isRight} = getScrollPosition(scrollContainer);\n  const {width, height, left, top, bottom, right} = rect;\n  const direction = {\n    x: 0,\n    y: 0,\n  };\n  const speed = {\n    x: 0,\n    y: 0,\n  };\n\n  if (!isTop && top <= finalScrollContainerRect.top + height) {\n    // Scroll Up\n    direction.y = Direction.Backward;\n    speed.y =\n      acceleration *\n      Math.abs((top - height - finalScrollContainerRect.top) / height);\n  } else if (!isBottom && bottom >= finalScrollContainerRect.bottom - height) {\n    // Scroll Down\n    direction.y = Direction.Forward;\n    speed.y =\n      acceleration *\n      Math.abs((finalScrollContainerRect.bottom - height - bottom) / height);\n  }\n\n  if (!isRight && right >= finalScrollContainerRect.right - width) {\n    // Scroll Right\n    direction.x = Direction.Forward;\n    speed.x =\n      acceleration *\n      Math.abs((finalScrollContainerRect.right - width - right) / width);\n  } else if (!isLeft && left <= finalScrollContainerRect.left + width) {\n    // Scroll Left\n    direction.x = Direction.Backward;\n    speed.x =\n      acceleration *\n      Math.abs((left - width - finalScrollContainerRect.left) / width);\n  }\n\n  return {\n    direction,\n    speed,\n  };\n}\n","import {canUseDOM} from '@dnd-kit/utilities';\n\nexport function isDocumentScrollingElement(element: Element | null) {\n  if (!canUseDOM || !element) {\n    return false;\n  }\n\n  return element === document.scrollingElement;\n}\n","import {add} from '@dnd-kit/utilities';\n\nimport type {Coordinates} from '../../types';\nimport {getScrollCoordinates} from './getScrollCoordinates';\nimport {defaultCoordinates} from '../coordinates';\n\nexport function getScrollOffsets(scrollableAncestors: Element[]): Coordinates {\n  return scrollableAncestors.reduce<Coordinates>((acc, node) => {\n    return add(acc, getScrollCoordinates(node));\n  }, defaultCoordinates);\n}\n","import type { Coordinates, ClientRect, LayoutRect, ViewRect } from '../../types';\nimport { getScrollableAncestors, getScrollOffsets } from '../scroll';\nimport { defaultCoordinates } from '../coordinates';\n\nfunction getEdgeOffset(\n  node: HTMLElement | null,\n  parent: (Node & ParentNode) | null,\n  offset = defaultCoordinates\n): Coordinates {\n  if (!node || !(node instanceof HTMLElement)) {\n    return offset;\n  }\n\n  const nodeOffset = {\n    x: offset.x + node.offsetLeft,\n    y: offset.y + node.offsetTop,\n  };\n\n  if (node.offsetParent === parent) {\n    return nodeOffset;\n  }\n\n  return getEdgeOffset(node.offsetParent as HTMLElement, parent, nodeOffset);\n}\n\nexport function getElementLayout(element: HTMLElement): LayoutRect {\n  const { offsetWidth: width, offsetHeight: height } = element;\n  const { x: offsetLeft, y: offsetTop } = getEdgeOffset(element, null);\n\n  return {\n    width,\n    height,\n    offsetTop,\n    offsetLeft,\n  };\n}\n\nexport function getBoundingClientRect(\n  element: HTMLElement | Window\n): ClientRect {\n  if (element instanceof Window) {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    return {\n      top: 0,\n      left: 0,\n      right: width,\n      bottom: height,\n      width,\n      height,\n      offsetTop: 0,\n      offsetLeft: 0,\n    };\n  }\n\n  const { offsetTop, offsetLeft } = getElementLayout(element);\n  const {\n    width,\n    height,\n    top,\n    bottom,\n    left,\n    right,\n  } = element.getBoundingClientRect();\n\n  return {\n    width,\n    height,\n    top,\n    bottom,\n    right,\n    left,\n    offsetTop,\n    offsetLeft,\n  };\n}\n\nexport function getViewRect(element: HTMLElement): ViewRect {\n  const { width, height, offsetTop, offsetLeft } = getElementLayout(element);\n  // make sure there are no duplicate elements here.\n  const scrollableAncestors = Array.from(new Set(getScrollableAncestors(element.parentNode)))\n  const scrollOffsets = getScrollOffsets(scrollableAncestors);\n\n  const top = offsetTop - scrollOffsets.y;\n  const left = offsetLeft - scrollOffsets.x;\n\n  return {\n    width,\n    height,\n    top,\n    bottom: top + height,\n    right: left + width,\n    left,\n    offsetTop,\n    offsetLeft,\n  };\n}\n","import type {LayoutRect, ViewRect} from '../../types';\n\nexport function isViewRect(entry: LayoutRect | ViewRect): entry is ViewRect {\n  return 'top' in entry;\n}\n","import {getMinValueIndex} from '../other';\nimport {distanceBetween} from '../coordinates';\nimport {isViewRect} from '../rect';\nimport type {LayoutRect} from '../../types';\nimport type {CollisionDetection} from './types';\n\n/**\n * Returns the coordinates of the corners of a given rectangle:\n * [TopLeft {x, y}, TopRight {x, y}, BottomLeft {x, y}, BottomRight {x, y}]\n */\n\nfunction cornersOfRectangle(\n  rect: LayoutRect,\n  left = rect.offsetLeft,\n  top = rect.offsetTop\n) {\n  return [\n    {\n      x: left,\n      y: top,\n    },\n    {\n      x: left + rect.width,\n      y: top,\n    },\n    {\n      x: left,\n      y: top + rect.height,\n    },\n    {\n      x: left + rect.width,\n      y: top + rect.height,\n    },\n  ];\n}\n\n/**\n * Returns the closest rectangle from an array of rectangles to the corners of\n * another rectangle.\n */\nexport const closestCorners: CollisionDetection = (entries, target) => {\n  const corners = cornersOfRectangle(target, target.left, target.top);\n\n  const distances = entries.map(([_, entry]) => {\n    const entryCorners = cornersOfRectangle(\n      entry,\n      isViewRect(entry) ? entry.left : undefined,\n      isViewRect(entry) ? entry.top : undefined\n    );\n    const distances = corners.reduce((accumulator, corner, index) => {\n      return accumulator + distanceBetween(entryCorners[index], corner);\n    }, 0);\n\n    return Number((distances / 4).toFixed(4));\n  });\n\n  const minValueIndex = getMinValueIndex(distances);\n\n  return entries[minValueIndex] ? entries[minValueIndex][0] : null;\n};\n","import {getMaxValueIndex} from '../other';\nimport type {LayoutRect, ViewRect} from '../../types';\nimport type {CollisionDetection} from './types';\n\n/**\n * Returns the intersecting rectangle area between two rectangles\n */\nfunction getIntersectionRatio(entry: LayoutRect, target: ViewRect): number {\n  const top = Math.max(target.top, entry.offsetTop);\n  const left = Math.max(target.left, entry.offsetLeft);\n  const right = Math.min(\n    target.left + target.width,\n    entry.offsetLeft + entry.width\n  );\n  const bottom = Math.min(\n    target.top + target.height,\n    entry.offsetTop + entry.height\n  );\n  const width = right - left;\n  const height = bottom - top;\n\n  if (left < right && top < bottom) {\n    const targetArea = target.width * target.height;\n    const entryArea = entry.width * entry.height;\n    const intersectionArea = width * height;\n    const intersectionRatio =\n      intersectionArea / (targetArea + entryArea - intersectionArea);\n\n    return Number(intersectionRatio.toFixed(4));\n  }\n\n  // Rectangles do not overlap, or overlap has an area of zero (edge/corner overlap)\n  return 0;\n}\n\n/**\n * Returns the rectangle that has the greatest intersection area with a given\n * rectangle in an array of rectangles.\n */\nexport const rectIntersection: CollisionDetection = (entries, target) => {\n  const intersections = entries.map(([_, entry]) =>\n    getIntersectionRatio(entry, target)\n  );\n\n  const maxValueIndex = getMaxValueIndex(intersections);\n\n  if (intersections[maxValueIndex] <= 0) {\n    return null;\n  }\n\n  return entries[maxValueIndex] ? entries[maxValueIndex][0] : null;\n};\n","export function getOwnerDocument(target: Event['target']) {\n  return target instanceof HTMLElement ? target.ownerDocument : document;\n}\n","import {omit} from '../utilities';\nimport {Action, Actions} from './actions';\nimport type {State} from './types';\n\nexport function getInitialState(): State {\n  return {\n    draggable: {\n      active: null,\n      initialCoordinates: {x: 0, y: 0},\n      lastEvent: null,\n      nodes: {},\n      translate: {x: 0, y: 0},\n    },\n    droppable: {\n      containers: {},\n    },\n  };\n}\n\nexport function reducer(state: State, action: Actions): State {\n  switch (action.type) {\n    case Action.DragStart:\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          initialCoordinates: action.initialCoordinates,\n          active: action.active,\n          lastEvent: Action.DragStart,\n        },\n      };\n    case Action.DragMove:\n      if (!state.draggable.active) {\n        return state;\n      }\n\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          translate: {\n            x: action.coordinates.x - state.draggable.initialCoordinates.x,\n            y: action.coordinates.y - state.draggable.initialCoordinates.y,\n          },\n        },\n      };\n    case Action.DragEnd:\n    case Action.DragCancel:\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          active: null,\n          initialCoordinates: {x: 0, y: 0},\n          translate: {x: 0, y: 0},\n          lastEvent: action.type,\n        },\n      };\n\n    case Action.RegisterDroppable: {\n      const {element} = action;\n      const {id} = element;\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers: {\n            ...state.droppable.containers,\n            [id]: element,\n          },\n        },\n      };\n    }\n\n    case Action.SetDroppableDisabled: {\n      const {id, disabled} = action;\n      const element = state.droppable.containers[id];\n\n      if (!element) {\n        return state;\n      }\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers: {\n            ...state.droppable.containers,\n            [id]: {\n              ...element,\n              disabled,\n            },\n          },\n        },\n      };\n    }\n\n    case Action.UnregisterDroppable: {\n      const {id} = action;\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers: omit(id, state.droppable.containers),\n        },\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n","export function omit<T>(id: string, elements: Record<string, T>) {\n  const {[id]: _, ...other} = elements;\n\n  return other;\n}\n","import React, {useRef, useEffect} from 'react';\nimport {createPortal} from 'react-dom';\nimport {canUseDOM, useUniqueId} from '@dnd-kit/utilities';\nimport {HiddenText, LiveRegion, useAnnouncement} from '@dnd-kit/accessibility';\n\nimport {Announcements, ScreenReaderInstructions} from './types';\nimport {defaultAnnouncements} from './defaults';\nimport {UniqueIdentifier} from '../../types';\nimport {Action, State} from '../../store';\n\ninterface Props {\n  announcements?: Announcements;\n  activeId: UniqueIdentifier | null;\n  overId: UniqueIdentifier | null;\n  lastEvent: State['draggable']['lastEvent'];\n  screenReaderInstructions: ScreenReaderInstructions;\n  hiddenTextDescribedById: UniqueIdentifier;\n}\n\nexport function Accessibility({\n  announcements = defaultAnnouncements,\n  activeId,\n  overId,\n  lastEvent,\n  hiddenTextDescribedById,\n  screenReaderInstructions,\n}: Props) {\n  const {announce, entries} = useAnnouncement();\n  const tracked = useRef({\n    activeId,\n    overId,\n  });\n  const liveRegionId = useUniqueId(`DndLiveRegion`);\n\n  useEffect(() => {\n    const {\n      activeId: previousActiveId,\n      overId: previousOverId,\n    } = tracked.current;\n    let announcement: string | undefined;\n\n    if (!previousActiveId && activeId) {\n      announcement = announcements.onDragStart(activeId);\n    } else if (!activeId && previousActiveId) {\n      if (lastEvent === Action.DragEnd) {\n        announcement = announcements.onDragEnd(\n          previousActiveId,\n          previousOverId ?? undefined\n        );\n      } else if (lastEvent === Action.DragCancel) {\n        announcement = announcements.onDragCancel(previousActiveId);\n      }\n    } else if (activeId && previousActiveId && overId !== previousOverId) {\n      announcement = announcements.onDragOver(activeId, overId ?? undefined);\n    }\n\n    if (announcement) {\n      announce(announcement);\n    }\n\n    if (\n      tracked.current.overId !== overId ||\n      tracked.current.activeId !== activeId\n    ) {\n      tracked.current = {\n        activeId,\n        overId,\n      };\n    }\n  }, [announcements, announce, activeId, overId, lastEvent]);\n\n  return canUseDOM\n    ? createPortal(\n        <>\n          <HiddenText\n            id={hiddenTextDescribedById}\n            value={screenReaderInstructions.draggable}\n          />\n          <LiveRegion id={liveRegionId} entries={entries} />\n        </>,\n        document.body\n      )\n    : null;\n}\n","import {useCallback, useEffect, useRef, useState} from 'react';\nimport {useLazyMemo} from '@dnd-kit/utilities';\n\nimport {getElementLayout} from '../../utilities';\nimport {DroppableContainers, LayoutRectMap} from '../../store/types';\n\nconst defaultValue: LayoutRectMap = new Map();\n\nexport function useLayoutRectMap(\n  containers: DroppableContainers,\n  disabled: boolean\n) {\n  const [willRecomputeLayouts, setWillRecomputeLayouts] = useState(false);\n  const containersRef = useRef(containers);\n  const recomputeLayouts = useCallback(() => {\n    setWillRecomputeLayouts(true);\n  }, []);\n  const layoutRectMap = useLazyMemo<LayoutRectMap>(\n    (previousValue) => {\n      if (disabled) {\n        return defaultValue;\n      }\n\n      if (\n        !previousValue ||\n        previousValue === defaultValue ||\n        containersRef.current !== containers ||\n        willRecomputeLayouts\n      ) {\n        for (let container of Object.values(containers)) {\n          if (!container) {\n            continue;\n          }\n\n          container.rect.current = container.node.current\n            ? getElementLayout(container.node.current)\n            : null;\n        }\n\n        return createLayoutRectMap(containers);\n      }\n\n      return previousValue;\n    },\n    [containers, disabled, willRecomputeLayouts]\n  );\n\n  useEffect(() => {\n    containersRef.current = containers;\n  }, [containers]);\n\n  useEffect(() => {\n    if (willRecomputeLayouts) {\n      setWillRecomputeLayouts(false);\n    }\n  }, [willRecomputeLayouts]);\n\n  return {layoutRectMap, recomputeLayouts, willRecomputeLayouts};\n}\n\nfunction createLayoutRectMap(\n  containers: DroppableContainers | null\n): LayoutRectMap {\n  const layoutRectMap: LayoutRectMap = new Map();\n\n  if (containers) {\n    for (const container of Object.values(containers)) {\n      if (!container) {\n        continue;\n      }\n\n      const {id, rect, disabled} = container;\n\n      if (disabled || rect.current == null) {\n        continue;\n      }\n\n      layoutRectMap.set(id, rect.current);\n    }\n  }\n\n  return layoutRectMap;\n}\n","import {useEffect, useRef} from 'react';\nimport {useLazyMemo} from '@dnd-kit/utilities';\n\nimport {getScrollableAncestors} from '../../utilities';\n\nconst defaultValue: Element[] = [];\n\nexport function useScrollableAncestors(node: Element | null) {\n  const previousNode = useRef(node);\n\n  const ancestors = useLazyMemo<Element[]>(\n    (previousValue) => {\n      if (!node) {\n        return defaultValue;\n      }\n\n      if (\n        previousValue &&\n        node &&\n        previousNode.current &&\n        node.parentNode === previousNode.current.parentNode\n      ) {\n        return previousValue;\n      }\n\n      return getScrollableAncestors(node);\n    },\n    [node]\n  );\n\n  useEffect(() => {\n    previousNode.current = node;\n  }, [node]);\n\n  return ancestors;\n}\n","import {useRef} from 'react';\nimport {useLazyMemo} from '@dnd-kit/utilities';\n\nimport {\n  getBoundingClientRect,\n  getElementLayout,\n  getViewRect,\n} from '../../utilities';\nimport type {LayoutRect} from '../../types';\n\ntype RectFn<T, U> = (element: U) => T;\n\nexport const useClientRect = createUseRectFn(getBoundingClientRect);\nexport const useClientRects = createUseRectsFn(getBoundingClientRect);\nexport const useViewRect = createUseRectFn(getViewRect);\nexport const useLayoutRect = createUseRectFn(getElementLayout);\n\nfunction createUseRectFn<T = LayoutRect, U = HTMLElement>(\n  getRect: RectFn<T, U>\n) {\n  return function useClientRect(\n    element: U | null,\n    forceRecompute?: boolean\n  ): T | null {\n    const previousElement = useRef(element);\n\n    return useLazyMemo<T | null>(\n      (previousValue) => {\n        if (!element) {\n          return null;\n        }\n\n        if (\n          forceRecompute ||\n          (!previousValue && element) ||\n          element !== previousElement.current\n        ) {\n          if (element instanceof HTMLElement && element.parentNode == null) {\n            return null;\n          }\n\n          return getRect(element as U);\n        }\n\n        return previousValue ?? null;\n      },\n      [element, forceRecompute]\n    );\n  };\n}\n\nfunction createUseRectsFn<T = LayoutRect>(getRect: RectFn<T, HTMLElement>) {\n  const defaultValue: T[] = [];\n\n  return function useRects(elements: Element[], forceRecompute?: boolean): T[] {\n    const previousElements = useRef(elements);\n\n    return useLazyMemo<T[]>(\n      (previousValue) => {\n        if (!elements.length) {\n          return defaultValue;\n        }\n\n        if (\n          forceRecompute ||\n          (!previousValue && elements.length) ||\n          elements !== previousElements.current\n        ) {\n          return elements.map((element) => getRect(element as HTMLElement));\n        }\n\n        return previousValue ?? defaultValue;\n      },\n      [elements, forceRecompute]\n    );\n  };\n}\n","import type {Coordinates, UniqueIdentifier} from '../../types';\nimport type {SensorContext} from '../types';\n\nexport enum KeyboardCode {\n  Space = 'Space',\n  Down = 'ArrowDown',\n  Right = 'ArrowRight',\n  Left = 'ArrowLeft',\n  Up = 'ArrowUp',\n  Esc = 'Escape',\n  Enter = 'Enter',\n}\n\nexport type KeyboardCodes = {\n  start: KeyboardEvent['code'][];\n  cancel: KeyboardEvent['code'][];\n  end: KeyboardEvent['code'][];\n};\n\nexport type KeyboardCoordinateGetter = (\n  event: KeyboardEvent,\n  args: {\n    active: UniqueIdentifier;\n    currentCoordinates: Coordinates;\n    context: SensorContext;\n  }\n) => Coordinates | void;\n","export class Listeners {\n  private listeners: {\n    eventName: string;\n    handler: EventListenerOrEventListenerObject;\n  }[] = [];\n\n  constructor(private target: HTMLElement | Document) {}\n\n  public add(\n    eventName: string,\n    handler: EventListenerOrEventListenerObject,\n    options?: AddEventListenerOptions | false\n  ) {\n    this.target.addEventListener(eventName, handler, options);\n    this.listeners.push({eventName, handler});\n  }\n\n  public removeAll() {\n    this.listeners.forEach(({eventName, handler}) =>\n      this.target.removeEventListener(eventName, handler)\n    );\n  }\n}\n","import {subtract as getCoordinatesDelta} from '@dnd-kit/utilities';\n\nimport {getEventListenerTarget, Listeners} from '../utilities';\n\nimport {getEventCoordinates, getOwnerDocument} from '../../utilities';\nimport {KeyboardCode} from '../keyboard';\nimport type {SensorInstance, SensorProps, SensorOptions} from '../types';\nimport type {Coordinates} from '../../types';\n\ninterface DistanceConstraint {\n  distance: number;\n}\n\ninterface DelayConstraint {\n  delay: number;\n  tolerance: number;\n}\n\ninterface EventDescriptor {\n  name: keyof DocumentEventMap;\n  passive?: boolean;\n}\n\nexport interface PointerEventHandlers {\n  move: EventDescriptor;\n  end: EventDescriptor;\n}\n\nexport type PointerActivationConstraint = DistanceConstraint | DelayConstraint;\n\nfunction isDistanceConstraint(\n  constraint: PointerActivationConstraint\n): constraint is DistanceConstraint {\n  return Boolean(constraint && 'distance' in constraint);\n}\n\nfunction isDelayConstraint(\n  constraint: PointerActivationConstraint\n): constraint is DelayConstraint {\n  return Boolean(constraint && 'delay' in constraint);\n}\n\nexport interface PointerSensorOptions extends SensorOptions {\n  activationConstraint?: PointerActivationConstraint;\n}\n\nexport type PointerSensorProps = SensorProps<PointerSensorOptions>;\n\nenum EventName {\n  Keydown = 'keydown',\n}\n\nexport class AbstractPointerSensor implements SensorInstance {\n  public autoScrollEnabled = true;\n  private activated: boolean = false;\n  private initialCoordinates: Coordinates;\n  private timeoutId: NodeJS.Timeout | null = null;\n  private listeners: Listeners;\n  private ownerDocument: Document;\n\n  constructor(\n    private props: PointerSensorProps,\n    private events: PointerEventHandlers,\n    listenerTarget = getEventListenerTarget(props.event.target)\n  ) {\n    const {event} = props;\n\n    this.props = props;\n    this.events = events;\n    this.ownerDocument = getOwnerDocument(event.target);\n    this.listeners = new Listeners(listenerTarget);\n    this.initialCoordinates = getEventCoordinates(event);\n    this.handleStart = this.handleStart.bind(this);\n    this.handleMove = this.handleMove.bind(this);\n    this.handleEnd = this.handleEnd.bind(this);\n    this.handleKeydown = this.handleKeydown.bind(this);\n\n    this.attach();\n  }\n\n  private attach() {\n    const {\n      events,\n      props: {\n        options: {activationConstraint},\n      },\n    } = this;\n\n    this.listeners.add(events.move.name, this.handleMove, false);\n    this.listeners.add(events.end.name, this.handleEnd);\n\n    this.ownerDocument.addEventListener(EventName.Keydown, this.handleKeydown);\n\n    if (activationConstraint) {\n      if (isDistanceConstraint(activationConstraint)) {\n        return;\n      }\n\n      if (isDelayConstraint(activationConstraint)) {\n        this.timeoutId = setTimeout(\n          this.handleStart,\n          activationConstraint.delay\n        );\n        return;\n      }\n    }\n\n    this.handleStart();\n  }\n\n  private detach() {\n    this.listeners.removeAll();\n    this.ownerDocument.removeEventListener(\n      EventName.Keydown,\n      this.handleKeydown\n    );\n\n    if (this.timeoutId !== null) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n  }\n\n  private handleStart() {\n    const {initialCoordinates} = this;\n    const {onStart} = this.props;\n\n    if (initialCoordinates) {\n      this.activated = true;\n\n      onStart(initialCoordinates);\n    }\n  }\n\n  private handleMove(event: Event) {\n    const {activated, initialCoordinates, props} = this;\n    const {\n      onMove,\n      options: {activationConstraint},\n    } = props;\n\n    if (!initialCoordinates) {\n      return;\n    }\n\n    const coordinates = getEventCoordinates(event);\n    const delta = getCoordinatesDelta(initialCoordinates, coordinates);\n    const combinedDelta = Math.abs(delta.x) + Math.abs(delta.y);\n\n    if (!activated && activationConstraint) {\n      // Constraint validation\n      if (isDelayConstraint(activationConstraint)) {\n        if (combinedDelta >= activationConstraint.tolerance) {\n          return this.handleCancel();\n        }\n\n        return;\n      }\n\n      if (isDistanceConstraint(activationConstraint)) {\n        if (combinedDelta >= activationConstraint.distance) {\n          return this.handleStart();\n        }\n\n        return;\n      }\n    }\n\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    onMove(coordinates);\n  }\n\n  private handleEnd() {\n    const {onEnd} = this.props;\n\n    this.detach();\n    onEnd();\n  }\n\n  private handleCancel() {\n    const {onCancel} = this.props;\n\n    this.detach();\n    onCancel();\n  }\n\n  private handleKeydown(event: KeyboardEvent) {\n    if (event.code === KeyboardCode.Esc) {\n      this.handleCancel();\n    }\n  }\n}\n","import {KeyboardCoordinateGetter, KeyboardCode, KeyboardCodes} from './types';\n\nexport const defaultKeyboardCodes: KeyboardCodes = {\n  start: [KeyboardCode.Space, KeyboardCode.Enter],\n  cancel: [KeyboardCode.Esc],\n  end: [KeyboardCode.Space, KeyboardCode.Enter],\n};\n\nexport const defaultKeyboardCoordinateGetter: KeyboardCoordinateGetter = (\n  event,\n  {currentCoordinates}\n) => {\n  switch (event.code) {\n    case KeyboardCode.Right:\n      return {\n        ...currentCoordinates,\n        x: currentCoordinates.x + 25,\n      };\n    case KeyboardCode.Left:\n      return {\n        ...currentCoordinates,\n        x: currentCoordinates.x - 25,\n      };\n    case KeyboardCode.Down:\n      return {\n        ...currentCoordinates,\n        y: currentCoordinates.y + 25,\n      };\n    case KeyboardCode.Up:\n      return {\n        ...currentCoordinates,\n        y: currentCoordinates.y - 25,\n      };\n  }\n\n  return undefined;\n};\n","import {\n  add as getAdjustedCoordinates,\n  subtract as getCoordinatesDelta,\n} from '@dnd-kit/utilities';\n\nimport {Listeners} from '../utilities';\nimport type {SensorInstance, SensorProps, SensorOptions} from '../types';\nimport type {Coordinates} from '../../types';\n\nimport {KeyboardCoordinateGetter, KeyboardCode, KeyboardCodes} from './types';\nimport {\n  defaultKeyboardCodes,\n  defaultKeyboardCoordinateGetter,\n} from './defaults';\nimport {\n  defaultCoordinates,\n  getBoundingClientRect,\n  getOwnerDocument,\n  getScrollPosition,\n} from '../../utilities';\n\nexport interface KeyboardSensorOptions extends SensorOptions {\n  keyboardCodes?: KeyboardCodes;\n  coordinateGetter?: KeyboardCoordinateGetter;\n  scrollBehavior?: ScrollBehavior;\n}\n\nexport type KeyboardSensorProps = SensorProps<KeyboardSensorOptions>;\n\nexport class KeyboardSensor implements SensorInstance {\n  public autoScrollEnabled = false;\n  private coordinates: Coordinates = defaultCoordinates;\n  private listeners: Listeners;\n\n  constructor(private props: KeyboardSensorProps) {\n    const {\n      event: {target},\n    } = props;\n\n    this.props = props;\n    this.listeners = new Listeners(getOwnerDocument(target));\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n\n    this.attach();\n  }\n\n  private attach() {\n    this.handleStart();\n\n    setTimeout(() => this.listeners.add('keydown', this.handleKeyDown));\n  }\n\n  private handleStart() {\n    const {activeNode, onStart} = this.props;\n\n    if (!activeNode.current) {\n      throw new Error('Active draggable node is undefined');\n    }\n\n    const activeNodeRect = getBoundingClientRect(activeNode.current);\n    const coordinates = {\n      x: activeNodeRect.left,\n      y: activeNodeRect.top,\n    };\n\n    this.coordinates = coordinates;\n\n    onStart(coordinates);\n  }\n\n  private handleKeyDown(event: Event) {\n    if (event instanceof KeyboardEvent) {\n      const {coordinates} = this;\n      const {active, context, options} = this.props;\n      const {\n        keyboardCodes = defaultKeyboardCodes,\n        coordinateGetter = defaultKeyboardCoordinateGetter,\n        scrollBehavior = 'smooth',\n      } = options;\n      const {code} = event;\n\n      if (keyboardCodes.end.includes(code)) {\n        this.handleEnd(event);\n        return;\n      }\n\n      if (keyboardCodes.cancel.includes(code)) {\n        this.handleCancel(event);\n        return;\n      }\n\n      const newCoordinates = coordinateGetter(event, {\n        active,\n        context: context.current,\n        currentCoordinates: coordinates,\n      });\n\n      if (newCoordinates) {\n        const scrollDelta = {\n          x: 0,\n          y: 0,\n        };\n        const {scrollableAncestors} = context.current;\n        const scrollContainer = scrollableAncestors[0];\n\n        if (scrollContainer) {\n          const direction = event.code;\n          const coordinatesDelta = getCoordinatesDelta(\n            newCoordinates,\n            coordinates\n          );\n          const {\n            isTop,\n            isRight,\n            isLeft,\n            isBottom,\n            scrollElementRect,\n            maxScroll,\n            minScroll,\n          } = getScrollPosition(scrollContainer);\n\n          const clampedCoordinates = {\n            x: Math.min(\n              direction === KeyboardCode.Right\n                ? scrollElementRect.right - scrollElementRect.width / 2\n                : scrollElementRect.right,\n              Math.max(\n                direction === KeyboardCode.Right\n                  ? scrollElementRect.left\n                  : scrollElementRect.left + scrollElementRect.width / 2,\n                newCoordinates.x\n              )\n            ),\n            y: Math.min(\n              direction === KeyboardCode.Down\n                ? scrollElementRect.bottom - scrollElementRect.height / 2\n                : scrollElementRect.bottom,\n              Math.max(\n                direction === KeyboardCode.Down\n                  ? scrollElementRect.top\n                  : scrollElementRect.top + scrollElementRect.height / 2,\n                newCoordinates.y\n              )\n            ),\n          };\n\n          const canScrollX =\n            (direction === KeyboardCode.Right && !isRight) ||\n            (direction === KeyboardCode.Left && !isLeft);\n          const canScrollY =\n            (direction === KeyboardCode.Down && !isBottom) ||\n            (direction === KeyboardCode.Up && !isTop);\n\n          if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {\n            const canFullyScrollToNewCoordinates =\n              (direction === KeyboardCode.Right &&\n                scrollContainer.scrollLeft + coordinatesDelta.x <=\n                  maxScroll.x) ||\n              (direction === KeyboardCode.Left &&\n                scrollContainer.scrollLeft + coordinatesDelta.x >= minScroll.x);\n\n            if (canFullyScrollToNewCoordinates) {\n              // We don't need to update coordinates, the scroll adjustment alone will trigger\n              // logic to auto-detect the new container we are over\n              scrollContainer.scrollBy({\n                left: coordinatesDelta.x,\n                behavior: scrollBehavior,\n              });\n              return;\n            }\n\n            scrollDelta.x =\n              direction === KeyboardCode.Right\n                ? scrollContainer.scrollLeft - maxScroll.x\n                : scrollContainer.scrollLeft - minScroll.x;\n\n            scrollContainer.scrollBy({\n              left: -scrollDelta.x,\n              behavior: scrollBehavior,\n            });\n          } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {\n            const canFullyScrollToNewCoordinates =\n              (direction === KeyboardCode.Down &&\n                scrollContainer.scrollTop + coordinatesDelta.y <=\n                  maxScroll.y) ||\n              (direction === KeyboardCode.Up &&\n                scrollContainer.scrollTop + coordinatesDelta.y >= minScroll.y);\n\n            if (canFullyScrollToNewCoordinates) {\n              // We don't need to update coordinates, the scroll adjustment alone will trigger\n              // logic to auto-detect the new container we are over\n              scrollContainer.scrollBy({\n                top: coordinatesDelta.y,\n                behavior: scrollBehavior,\n              });\n              return;\n            }\n\n            scrollDelta.y =\n              direction === KeyboardCode.Down\n                ? scrollContainer.scrollTop - maxScroll.y\n                : scrollContainer.scrollTop - minScroll.y;\n\n            scrollContainer.scrollBy({\n              top: -scrollDelta.y,\n              behavior: scrollBehavior,\n            });\n          }\n        }\n\n        this.handleMove(\n          event,\n          getAdjustedCoordinates(newCoordinates, scrollDelta)\n        );\n      }\n    }\n  }\n\n  private handleMove(event: Event, coordinates: Coordinates) {\n    const {onMove} = this.props;\n\n    event.preventDefault();\n    onMove(coordinates);\n    this.coordinates = coordinates;\n  }\n\n  private handleEnd(event: Event) {\n    const {onEnd} = this.props;\n\n    event.preventDefault();\n    this.detach();\n    onEnd();\n  }\n\n  private handleCancel(event: Event) {\n    const {onCancel} = this.props;\n\n    event.preventDefault();\n    this.detach();\n    onCancel();\n  }\n\n  private detach() {\n    this.listeners.removeAll();\n  }\n\n  static activators = [\n    {\n      eventName: 'onKeyDown' as const,\n      handler: (\n        event: React.KeyboardEvent,\n        {keyboardCodes = defaultKeyboardCodes}: KeyboardSensorOptions\n      ) => {\n        const {code} = event.nativeEvent;\n\n        if (keyboardCodes.start.includes(code)) {\n          event.preventDefault();\n\n          return true;\n        }\n\n        return false;\n      },\n    },\n  ];\n}\n","import {getOwnerDocument} from '../../utilities';\n\nexport function getEventListenerTarget(\n  element: EventTarget | null\n): HTMLElement | Document {\n  return element instanceof HTMLElement ? element : getOwnerDocument(element);\n}\n","import {getOwnerDocument} from '../../utilities';\n\nimport {\n  AbstractPointerSensor,\n  PointerSensorProps,\n  PointerEventHandlers,\n} from './AbstractPointerSensor';\n\nconst events: PointerEventHandlers = {\n  move: {name: 'pointermove'},\n  end: {name: 'pointerup'},\n};\n\nexport class PointerSensor extends AbstractPointerSensor {\n  constructor(props: PointerSensorProps) {\n    const {event} = props;\n    // Pointer events stop firing if the target is unmounted while dragging\n    // Therefore we attach listeners to the owner document instead\n    const listenerTarget = getOwnerDocument(event.target);\n\n    super(props, events, listenerTarget);\n  }\n\n  static activators = [\n    {\n      eventName: 'onPointerDown' as const,\n      handler: ({nativeEvent}: React.PointerEvent) => {\n        if (!nativeEvent.isPrimary || nativeEvent.button !== 0) {\n          return false;\n        }\n\n        nativeEvent.preventDefault();\n\n        return true;\n      },\n    },\n  ];\n}\n","import {getOwnerDocument} from '../../utilities';\nimport {\n  AbstractPointerSensor,\n  PointerEventHandlers,\n  PointerSensorOptions,\n  PointerSensorProps,\n} from '../pointer';\n\nconst events: PointerEventHandlers = {\n  move: {name: 'mousemove'},\n  end: {name: 'mouseup'},\n};\n\nenum MouseButton {\n  RightClick = 2,\n}\n\nexport interface MouseSensorOptions extends PointerSensorOptions {}\n\nexport class MouseSensor extends AbstractPointerSensor {\n  constructor(props: PointerSensorProps) {\n    super(props, events, getOwnerDocument(props.event.target));\n  }\n\n  static activators = [\n    {\n      eventName: 'onMouseDown' as const,\n      handler: ({nativeEvent}: React.MouseEvent) => {\n        if (nativeEvent.button === MouseButton.RightClick) {\n          return false;\n        }\n\n        nativeEvent.preventDefault();\n\n        return true;\n      },\n    },\n  ];\n}\n","import React from 'react';\n\nimport {\n  AbstractPointerSensor,\n  PointerSensorProps,\n  PointerEventHandlers,\n  PointerSensorOptions,\n} from '../pointer';\n\nconst events: PointerEventHandlers = {\n  move: {name: 'touchmove'},\n  end: {name: 'touchend'},\n};\n\nexport interface TouchSensorOptions extends PointerSensorOptions {}\n\nexport class TouchSensor extends AbstractPointerSensor {\n  constructor(props: PointerSensorProps) {\n    super(props, events);\n  }\n\n  static activators = [\n    {\n      eventName: 'onTouchStart' as const,\n      handler: ({nativeEvent}: React.TouchEvent) => {\n        const {touches} = nativeEvent;\n\n        if (touches.length > 1) {\n          return false;\n        }\n\n        if (nativeEvent.cancelable) {\n          nativeEvent.preventDefault();\n        }\n\n        return true;\n      },\n    },\n  ];\n}\n","import type {FirstArgument, Transform} from '@dnd-kit/utilities';\n\nimport type {Modifiers, Modifier} from './types';\n\nexport function applyModifiers(\n  modifiers: Modifiers | undefined,\n  {transform, ...args}: FirstArgument<Modifier>\n): Transform {\n  return modifiers?.length\n    ? modifiers.reduce<Transform>((accumulator, modifier) => {\n        return modifier({\n          transform: accumulator,\n          ...args,\n        });\n      }, transform)\n    : transform;\n}\n","import React, {\n  memo,\n  createContext,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\nimport {\n  add,\n  Transform,\n  useIsomorphicLayoutEffect,\n  useNodeRef,\n  useUniqueId,\n} from '@dnd-kit/utilities';\n\nimport {\n  Action,\n  Context,\n  DndContextDescriptor,\n  getInitialState,\n  reducer,\n} from '../../store';\nimport type {Coordinates, ViewRect, LayoutRect, Translate} from '../../types';\nimport {\n  useAutoScroller,\n  useCachedNode,\n  useCombineActivators,\n  useLayoutRectMap,\n  useScrollableAncestors,\n  useClientRect,\n  useClientRects,\n  useFindElementFromPoint,\n  useScrollOffsets,\n  useViewRect,\n  SyntheticListener,\n} from '../../hooks/utilities';\nimport {\n  KeyboardSensor,\n  PointerSensor,\n  Sensor,\n  SensorContext,\n  SensorDescriptor,\n  SensorHandler,\n  SensorInstance,\n} from '../../sensors';\nimport {\n  adjustScale,\n  CollisionDetection,\n  defaultCoordinates,\n  getAdjustedRect,\n  centerOfRectangle,\n  getRectDelta,\n  rectIntersection,\n} from '../../utilities';\nimport {applyModifiers, Modifiers} from '../../modifiers';\nimport type {\n  LayoutRectMap,\n  DraggableNode,\n  DraggableNodes,\n  DroppableContainers,\n} from '../../store/types';\nimport type {UniqueIdentifier} from '../../types';\nimport {\n  Accessibility,\n  Announcements,\n  screenReaderInstructions as defaultScreenReaderInstructions,\n  ScreenReaderInstructions,\n} from '../Accessibility';\n\ninterface Active {\n  id: UniqueIdentifier;\n}\n\nexport interface DragStartEvent {\n  active: Active;\n}\n\nexport interface DragMoveEvent {\n  active: Active;\n  delta: Translate;\n  draggingRect: ViewRect;\n  droppableRects: LayoutRectMap;\n  over: {\n    id: UniqueIdentifier;\n    rect: LayoutRect;\n  } | null;\n}\n\nexport interface DragOverEvent {\n  active: Active;\n  draggingRect: ViewRect;\n  droppableRects: LayoutRectMap;\n  over: {\n    id: UniqueIdentifier;\n    rect: LayoutRect;\n  } | null;\n}\n\nexport interface DragEndEvent {\n  active: Active;\n  delta: Translate;\n  over: {\n    id: UniqueIdentifier;\n  } | null;\n}\n\nexport type DragCancelEvent = DragEndEvent;\n\ninterface DndEvent extends Event {\n  dndKit?: {\n    capturedBy: Sensor<any>;\n  };\n}\n\ninterface Props {\n  autoScroll?: boolean;\n  announcements?: Announcements;\n  children?: React.ReactNode;\n  collisionDetection?: CollisionDetection;\n  screenReaderInstructions?: ScreenReaderInstructions;\n  sensors?: SensorDescriptor<any>[];\n  modifiers?: Modifiers;\n  onDragStart?(event: DragStartEvent): void;\n  onDragMove?(event: DragMoveEvent): void;\n  onDragOver?(event: DragOverEvent): void;\n  onDragEnd?(event: DragEndEvent): void;\n  onDragCancel?(event: DragCancelEvent): void;\n}\n\nconst defaultSensors = [\n  {sensor: PointerSensor, options: {}},\n  {sensor: KeyboardSensor, options: {}},\n];\n\nexport const ActiveDraggableContext = createContext<Transform>({\n  ...defaultCoordinates,\n  scaleX: 1,\n  scaleY: 1,\n});\n\nexport const DndContext = memo(function DndContext({\n  autoScroll = true,\n  announcements,\n  children,\n  sensors = defaultSensors,\n  collisionDetection = rectIntersection,\n  screenReaderInstructions = defaultScreenReaderInstructions,\n  modifiers,\n  ...props\n}: Props) {\n  const store = useReducer(reducer, undefined, getInitialState);\n  const [state, dispatch] = store;\n  const {\n    draggable: {active, lastEvent, nodes: draggableNodes, translate},\n    droppable: {containers: droppableContainers},\n  } = state;\n  const activeRef = useRef<UniqueIdentifier | null>(null);\n  const [activeSensor, setActiveSensor] = useState<SensorInstance | null>(null);\n  const [activatorEvent, setActivatorEvent] = useState<Event | null>(null);\n  const latestProps = useRef(props);\n  const draggableDescribedById = useUniqueId(`DndDescribedBy`);\n\n  const {\n    layoutRectMap: droppableRects,\n    recomputeLayouts,\n    willRecomputeLayouts,\n  } = useLayoutRectMap(droppableContainers, active === null);\n  const activeNode = useCachedNode(\n    getDraggableNode(active, draggableNodes),\n    active\n  );\n  const activeNodeRect = useViewRect(activeNode);\n  const activeNodeClientRect = useClientRect(activeNode);\n  const initialActiveNodeRectRef = useRef<ViewRect | null>(null);\n  const initialActiveNodeRect = initialActiveNodeRectRef.current;\n  const nodeRectDelta = getRectDelta(activeNodeRect, initialActiveNodeRect);\n  const tracked = useRef<{\n    active: UniqueIdentifier | null;\n    droppableRects: LayoutRectMap;\n    overId: UniqueIdentifier | null;\n    scrollAdjustedTransalte: Coordinates;\n    translatedRect: ViewRect | null;\n  }>({\n    active,\n    droppableRects,\n    overId: null,\n    scrollAdjustedTransalte: defaultCoordinates,\n    translatedRect: null,\n  });\n  const overNode = getDroppableNode(\n    tracked.current.overId,\n    droppableContainers\n  );\n  const windowRect = useClientRect(\n    activeNode ? activeNode.ownerDocument.defaultView : null\n  );\n  const containerNodeRect = useClientRect(\n    activeNode ? activeNode.parentElement : null\n  );\n  const scrollDetectionCoordinates = activeNodeRect\n    ? add(\n        centerOfRectangle(\n          activeNodeRect,\n          activeNodeRect.left,\n          activeNodeRect.top\n        ),\n        translate\n      )\n    : defaultCoordinates;\n  const detectedScrollElement = useFindElementFromPoint(\n    scrollDetectionCoordinates,\n    activeNode?.ownerDocument\n  );\n  const scrollTarget = active ? overNode ?? detectedScrollElement : null;\n  const scrollableAncestors = useScrollableAncestors(scrollTarget);\n  const scrollableAncestorRects = useClientRects(scrollableAncestors);\n\n  const [overlayNodeRef, setOverlayNodeRef] = useNodeRef();\n  const overlayNodeRect = useClientRect(\n    active ? overlayNodeRef.current : null,\n    willRecomputeLayouts\n  );\n\n  const modifiedTranslate = applyModifiers(modifiers, {\n    transform: {\n      x: translate.x - nodeRectDelta.x,\n      y: translate.y - nodeRectDelta.y,\n      scaleX: 1,\n      scaleY: 1,\n    },\n    activeNodeRect: activeNodeClientRect,\n    draggingNodeRect: overlayNodeRect ?? activeNodeClientRect,\n    containerNodeRect,\n    overlayNodeRect,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    windowRect,\n  });\n\n  const scrolllAdjustment = useScrollOffsets(scrollableAncestors);\n\n  const scrollAdjustedTransalte = add(modifiedTranslate, scrolllAdjustment);\n\n  const translatedRect = activeNodeRect\n    ? getAdjustedRect(activeNodeRect, modifiedTranslate)\n    : null;\n\n  const collisionRect = translatedRect\n    ? getAdjustedRect(translatedRect, scrolllAdjustment)\n    : null;\n\n  const overId =\n    active && collisionRect\n      ? collisionDetection(Array.from(droppableRects.entries()), collisionRect)\n      : null;\n  const overNodeRect = getLayoutRect(overId, droppableRects);\n  const over = useMemo(\n    () =>\n      overId && overNodeRect\n        ? {\n            id: overId,\n            rect: overNodeRect,\n          }\n        : null,\n    [overId, overNodeRect]\n  );\n\n  const transform = adjustScale(\n    modifiedTranslate,\n    overNodeRect,\n    activeNodeRect\n  );\n\n  const sensorContext = useRef<SensorContext>({\n    activeNode,\n    collisionRect,\n    droppableRects,\n    droppableContainers,\n    over,\n    scrollableAncestors,\n    translatedRect,\n  });\n\n  const instantiateSensor = useCallback(\n    (\n      event: React.SyntheticEvent,\n      {sensor: Sensor, options}: SensorDescriptor<any>\n    ) => {\n      if (!activeRef.current) {\n        return;\n      }\n\n      const activeNode = draggableNodes[activeRef.current];\n\n      if (!activeNode) {\n        return;\n      }\n\n      const sensorInstance = new Sensor({\n        active: activeRef.current,\n        activeNode,\n        event: event.nativeEvent,\n        options,\n        // Sensors need to be instantiated with refs for arguments that change over time\n        // otherwise they are frozen in time with the stale arguments\n        context: sensorContext,\n        onStart: (initialCoordinates) => {\n          const id = activeRef.current;\n\n          if (!id) {\n            return;\n          }\n\n          const {onDragStart} = latestProps.current;\n\n          dispatch({\n            type: Action.DragStart,\n            initialCoordinates,\n            active: id,\n          });\n\n          onDragStart?.({active: {id}});\n        },\n        onMove(coordinates) {\n          dispatch({\n            type: Action.DragMove,\n            coordinates,\n          });\n        },\n        onEnd: createHandler(Action.DragEnd),\n        onCancel: createHandler(Action.DragCancel),\n      });\n\n      setActiveSensor(sensorInstance);\n      setActivatorEvent(event.nativeEvent);\n\n      function createHandler(type: Action.DragEnd | Action.DragCancel) {\n        return function handler() {\n          const {overId, scrollAdjustedTransalte} = tracked.current;\n          const props = latestProps.current;\n          const activeId = activeRef.current;\n\n          if (activeId) {\n            activeRef.current = null;\n          }\n\n          dispatch({type});\n          setActiveSensor(null);\n          setActivatorEvent(null);\n\n          const handler =\n            type === Action.DragEnd ? props.onDragEnd : props.onDragCancel;\n\n          if (activeId) {\n            handler?.({\n              active: {\n                id: activeId,\n              },\n              delta: scrollAdjustedTransalte,\n              over: overId\n                ? {\n                    id: overId,\n                  }\n                : null,\n            });\n          }\n        };\n      }\n    },\n    [dispatch, draggableNodes]\n  );\n\n  const bindActivatorToSensorInstantiator = useCallback(\n    (\n      handler: SensorHandler,\n      sensor: SensorDescriptor<any>\n    ): SyntheticListener['handler'] => {\n      return (event, active) => {\n        const nativeEvent = event.nativeEvent as DndEvent;\n\n        if (\n          // No active draggable\n          activeRef.current !== null ||\n          // Event has already been captured\n          nativeEvent.dndKit ||\n          nativeEvent.defaultPrevented\n        ) {\n          return;\n        }\n\n        if (handler(event, sensor.options) === true) {\n          nativeEvent.dndKit = {\n            capturedBy: sensor.sensor,\n          };\n\n          activeRef.current = active;\n          instantiateSensor(event, sensor);\n        }\n      };\n    },\n    [instantiateSensor]\n  );\n\n  const activators = useCombineActivators(\n    sensors,\n    bindActivatorToSensorInstantiator\n  );\n\n  useIsomorphicLayoutEffect(\n    () => {\n      latestProps.current = props;\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    Object.values(props)\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    if (!active) {\n      return;\n    }\n\n    // Recompute rects right after dragging has begun in case they have changed\n    recomputeLayouts();\n  }, [active, recomputeLayouts]);\n\n  useEffect(() => {\n    if (!active) {\n      initialActiveNodeRectRef.current = null;\n    }\n\n    if (active && activeNodeRect && !initialActiveNodeRectRef.current) {\n      initialActiveNodeRectRef.current = activeNodeRect;\n    }\n  }, [activeNodeRect, active]);\n\n  useEffect(() => {\n    const activeId = activeRef.current;\n\n    if (!activeId) {\n      return;\n    }\n\n    const {onDragMove} = latestProps.current;\n    const {overId, droppableRects, translatedRect} = tracked.current;\n\n    if (!onDragMove || !translatedRect) {\n      return;\n    }\n    const overNodeRect = getLayoutRect(overId, droppableRects);\n\n    onDragMove({\n      active: {\n        id: activeId,\n      },\n      draggingRect: translatedRect,\n      droppableRects,\n      delta: {\n        x: scrollAdjustedTransalte.x,\n        y: scrollAdjustedTransalte.y,\n      },\n      over:\n        overId && overNodeRect\n          ? {\n              id: overId,\n              rect: overNodeRect,\n            }\n          : null,\n    });\n  }, [scrollAdjustedTransalte.x, scrollAdjustedTransalte.y]);\n\n  useEffect(() => {\n    if (!activeRef.current) {\n      return;\n    }\n\n    const {active, droppableRects, translatedRect} = tracked.current;\n\n    if (!active || !translatedRect) {\n      return;\n    }\n\n    const {onDragOver} = latestProps.current;\n    const overNodeRect = getLayoutRect(overId, droppableRects);\n\n    onDragOver?.({\n      active: {\n        id: active,\n      },\n      droppableRects: tracked.current.droppableRects,\n      draggingRect: translatedRect,\n      over:\n        overId && overNodeRect\n          ? {\n              id: overId,\n              rect: overNodeRect,\n            }\n          : null,\n    });\n  }, [overId]);\n\n  useEffect(() => {\n    tracked.current = {\n      active,\n      droppableRects,\n      overId,\n      translatedRect,\n      scrollAdjustedTransalte,\n    };\n  }, [active, droppableRects, overId, translatedRect, scrollAdjustedTransalte]);\n\n  useIsomorphicLayoutEffect(() => {\n    sensorContext.current = {\n      activeNode,\n      collisionRect,\n      droppableRects,\n      droppableContainers,\n      over,\n      scrollableAncestors,\n      translatedRect,\n    };\n  }, [\n    activeNode,\n    collisionRect,\n    droppableRects,\n    droppableContainers,\n    over,\n    scrollableAncestors,\n    translatedRect,\n  ]);\n\n  useAutoScroller({\n    draggingRect: translatedRect,\n    disabled: !autoScroll || !activeSensor?.autoScrollEnabled,\n    scrollableAncestors,\n    scrollableAncestorRects,\n  });\n\n  const contextValue = useMemo(() => {\n    const memoizedContext: DndContextDescriptor = {\n      active,\n      activeNode,\n      activeNodeRect,\n      activeNodeClientRect,\n      activatorEvent,\n      activators,\n      ariaDescribedById: {\n        draggable: draggableDescribedById,\n      },\n      overlayNode: {\n        nodeRef: overlayNodeRef,\n        rect: overlayNodeRect,\n        setRef: setOverlayNodeRef,\n      },\n      containerNodeRect,\n      dispatch,\n      draggableNodes,\n      droppableContainers,\n      droppableRects,\n      over,\n      recomputeLayouts,\n      scrollableAncestors,\n      scrollableAncestorRects,\n      willRecomputeLayouts,\n      windowRect,\n    };\n\n    return memoizedContext;\n  }, [\n    active,\n    activeNode,\n    activeNodeClientRect,\n    activeNodeRect,\n    activatorEvent,\n    activators,\n    containerNodeRect,\n    overlayNodeRect,\n    overlayNodeRef,\n    dispatch,\n    draggableNodes,\n    draggableDescribedById,\n    droppableContainers,\n    droppableRects,\n    over,\n    recomputeLayouts,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    setOverlayNodeRef,\n    willRecomputeLayouts,\n    windowRect,\n  ]);\n\n  return (\n    <>\n      <Context.Provider value={contextValue}>\n        <ActiveDraggableContext.Provider value={transform}>\n          {children}\n        </ActiveDraggableContext.Provider>\n      </Context.Provider>\n      <Accessibility\n        announcements={announcements}\n        activeId={active}\n        overId={overId}\n        lastEvent={lastEvent}\n        hiddenTextDescribedById={draggableDescribedById}\n        screenReaderInstructions={screenReaderInstructions}\n      />\n    </>\n  );\n});\n\nfunction getDroppableNode(\n  id: UniqueIdentifier | null,\n  droppableContainers: DroppableContainers\n): HTMLElement | null {\n  return id ? droppableContainers[id]?.node.current ?? null : null;\n}\n\nfunction getDraggableNode(\n  id: UniqueIdentifier | null,\n  droppableContainers: DraggableNodes\n): DraggableNode | null {\n  return id ? droppableContainers[id] ?? null : null;\n}\n\nfunction getLayoutRect(\n  id: UniqueIdentifier | null,\n  layoutRectMap: LayoutRectMap\n): LayoutRect | null {\n  return id ? layoutRectMap.get(id) ?? null : null;\n}\n","import type {Coordinates, ViewRect} from '../../types';\nimport {defaultCoordinates} from '../coordinates';\n\nexport function getRectDelta(\n  rect1: ViewRect | null,\n  rect2: ViewRect | null\n): Coordinates {\n  return rect1 && rect2\n    ? {\n        x: rect1.left - rect2.left,\n        y: rect1.top - rect2.top,\n      }\n    : defaultCoordinates;\n}\n","import {useLazyMemo} from '@dnd-kit/utilities';\nimport type {DraggableNode} from '../../store';\nimport {UniqueIdentifier} from '../../types';\n\nexport function useCachedNode(\n  draggableNode: DraggableNode | null,\n  active: UniqueIdentifier | null\n): DraggableNode['current'] {\n  return useLazyMemo(\n    (cachedNode) => {\n      if (active === null) {\n        return null;\n      }\n\n      // In some cases, the draggable node can unmount while dragging\n      // This is the case for virtualized lists. In those situations,\n      // we fall back to the last known value for that node.\n      return draggableNode?.current ?? cachedNode ?? null;\n    },\n    [draggableNode, active]\n  );\n}\n","import {useMemo} from 'react';\nimport type {Coordinates} from '../../types';\n\nexport function useFindElementFromPoint(\n  coordinates: Coordinates,\n  document: Document | undefined\n) {\n  // To-do: This is expensive and needs to be debounced\n  return useMemo(() => {\n    if (!document) {\n      return null;\n    }\n\n    return document.elementFromPoint(coordinates.x, coordinates.y);\n  }, [coordinates.x, coordinates.y, document]);\n}\n","import {useState, useCallback, useMemo, useRef, useEffect} from 'react';\nimport {add} from '@dnd-kit/utilities';\n\nimport {\n  defaultCoordinates,\n  getScrollableElement,\n  getScrollCoordinates,\n  getScrollOffsets,\n} from '../../utilities';\nimport type {Coordinates} from '../../types';\n\ntype ScrollCoordinates = Map<HTMLElement | Window, Coordinates>;\n\nexport function useScrollOffsets(elements: Element[]): Coordinates {\n  const [\n    scrollCoordinates,\n    setScrollCoordinates,\n  ] = useState<ScrollCoordinates | null>(null);\n  const prevElements = useRef(elements);\n\n  // To-do: Throttle the handleScroll callback\n  const handleScroll = useCallback((event: Event) => {\n    const scrollingElement = getScrollableElement(event.target);\n\n    if (!scrollingElement) {\n      return;\n    }\n\n    setScrollCoordinates((scrollCoordinates) => {\n      if (!scrollCoordinates) {\n        return null;\n      }\n\n      scrollCoordinates.set(\n        scrollingElement,\n        getScrollCoordinates(scrollingElement)\n      );\n\n      return new Map(scrollCoordinates);\n    });\n  }, []);\n\n  useEffect(() => {\n    const previousElements = prevElements.current;\n\n    if (elements !== previousElements) {\n      cleanup(previousElements);\n\n      const entries = elements\n        .map((element) => {\n          const scrollableElement = getScrollableElement(element);\n\n          if (scrollableElement) {\n            scrollableElement.addEventListener('scroll', handleScroll, {\n              passive: true,\n            });\n\n            return [\n              scrollableElement,\n              getScrollCoordinates(scrollableElement),\n            ] as const;\n          }\n\n          return null;\n        })\n        .filter(\n          (\n            entry\n          ): entry is [\n            HTMLElement | (Window & typeof globalThis),\n            Coordinates\n          ] => entry != null\n        );\n\n      setScrollCoordinates(entries.length ? new Map(entries) : null);\n\n      prevElements.current = elements;\n    }\n\n    return () => {\n      cleanup(elements);\n      cleanup(previousElements);\n    };\n\n    function cleanup(elements: Element[]) {\n      elements.forEach((element) => {\n        const scrollableElement = getScrollableElement(element);\n\n        scrollableElement?.removeEventListener('scroll', handleScroll);\n      });\n    }\n  }, [handleScroll, elements]);\n\n  return useMemo(() => {\n    if (elements.length) {\n      return scrollCoordinates\n        ? Array.from(scrollCoordinates.values()).reduce(\n            (acc, coordinates) => add(acc, coordinates),\n            defaultCoordinates\n          )\n        : getScrollOffsets(elements);\n    }\n\n    return defaultCoordinates;\n  }, [elements, scrollCoordinates]);\n}\n","import type {Transform} from '@dnd-kit/utilities';\nimport type {LayoutRect} from '../../types';\n\nexport function adjustScale(\n  transform: Transform,\n  rect1: LayoutRect | null,\n  rect2: LayoutRect | null\n): Transform {\n  return {\n    ...transform,\n    scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,\n    scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1,\n  };\n}\n","import {useMemo} from 'react';\n\nimport type {SensorDescriptor, SensorHandler} from '../../sensors';\nimport type {\n  SyntheticListener,\n  SyntheticListeners,\n} from './useSyntheticListeners';\n\nexport function useCombineActivators(\n  sensors: SensorDescriptor<any>[],\n  getSyntheticHandler: (\n    handler: SensorHandler,\n    sensor: SensorDescriptor<any>\n  ) => SyntheticListener['handler']\n): SyntheticListeners {\n  return useMemo(\n    () =>\n      sensors.reduce<SyntheticListeners>((accumulator, sensor) => {\n        const {sensor: Sensor} = sensor;\n\n        const sensorActivators = Sensor.activators.map((activator) => ({\n          eventName: activator.eventName,\n          handler: getSyntheticHandler(activator.handler, sensor),\n        }));\n\n        return [...accumulator, ...sensorActivators];\n      }, []),\n    [sensors, getSyntheticHandler]\n  );\n}\n","import {useCallback, useEffect, useRef} from 'react';\nimport {useInterval} from '@dnd-kit/utilities';\n\nimport {getScrollDirectionAndSpeed, defaultCoordinates} from '../../utilities';\nimport type {Coordinates, Direction, ViewRect} from '../../types';\n\ninterface Arguments {\n  disabled: boolean;\n  draggingRect: ViewRect | null;\n  interval?: number;\n  scrollableAncestors: Element[];\n  scrollableAncestorRects: ViewRect[];\n}\n\ninterface ScrollDirection {\n  x: 0 | Direction;\n  y: 0 | Direction;\n}\n\nexport function useAutoScroller({\n  disabled,\n  draggingRect,\n  interval = 5,\n  scrollableAncestors,\n  scrollableAncestorRects,\n}: Arguments) {\n  const [setAutoScrollInterval, clearAutoScrollInterval] = useInterval();\n  const scrollSpeed = useRef<Coordinates>({\n    x: 1,\n    y: 1,\n  });\n  const scrollDirection = useRef<ScrollDirection>(defaultCoordinates);\n  const scrollContainerRef = useRef<Element | null>(null);\n  const autoScroll = useCallback(() => {\n    const scrollContainer = scrollContainerRef.current;\n\n    if (!scrollContainer) {\n      return;\n    }\n\n    const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;\n    const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;\n\n    scrollContainer.scrollBy(scrollLeft, scrollTop);\n  }, []);\n\n  useEffect(() => {\n    if (disabled || !scrollableAncestors.length || !draggingRect) {\n      clearAutoScrollInterval();\n      return;\n    }\n\n    for (const scrollContainer of scrollableAncestors) {\n      const index = scrollableAncestors.indexOf(scrollContainer);\n      const scrolllContainerRect = scrollableAncestorRects[index];\n\n      if (!scrolllContainerRect) {\n        continue;\n      }\n\n      const {direction, speed} = getScrollDirectionAndSpeed(\n        scrollContainer,\n        scrolllContainerRect,\n        draggingRect\n      );\n\n      scrollSpeed.current = speed;\n      scrollDirection.current = direction;\n\n      clearAutoScrollInterval();\n\n      if (speed.x > 0 || speed.y > 0) {\n        scrollContainerRef.current = scrollContainer;\n        setAutoScrollInterval(autoScroll, interval);\n\n        break;\n      }\n    }\n  }, [\n    autoScroll,\n    draggingRect,\n    clearAutoScrollInterval,\n    disabled,\n    setAutoScrollInterval,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    interval,\n  ]);\n}\n","import {createContext, useContext, useEffect} from 'react';\nimport {Transform, useNodeRef} from '@dnd-kit/utilities';\n\nimport {Context} from '../store';\nimport {ActiveDraggableContext} from '../components/DndContext';\nimport {useSyntheticListeners, SyntheticListenerMap} from './utilities';\n\nexport interface UseDraggableArguments {\n  id: string;\n  disabled?: boolean;\n  attributes?: {\n    role?: string;\n    roleDescription?: string;\n    tabIndex?: number;\n  };\n}\n\nexport type DraggableSyntheticListeners = SyntheticListenerMap | undefined;\n\nconst NullContext = createContext<any>(null);\n\nconst defaultRole = 'button';\n\nexport function useDraggable({\n  id,\n  disabled = false,\n  attributes,\n}: UseDraggableArguments) {\n  const {\n    active,\n    activeNodeRect,\n    activatorEvent,\n    ariaDescribedById,\n    draggableNodes,\n    droppableRects,\n    activators,\n    over,\n  } = useContext(Context);\n  const {role = defaultRole, roleDescription = 'draggable', tabIndex = 0} =\n    attributes ?? {};\n  const isDragging = Boolean(active === id);\n  const transform: Transform | null = useContext(\n    isDragging ? ActiveDraggableContext : NullContext\n  );\n  const [node, setNodeRef] = useNodeRef();\n  const listeners = useSyntheticListeners(activators, id);\n\n  useEffect(\n    () => {\n      draggableNodes[id] = node;\n\n      return () => {\n        delete draggableNodes[id];\n      };\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [draggableNodes, id]\n  );\n\n  return {\n    active,\n    activeNodeRect,\n    activatorEvent,\n    attributes: {\n      role,\n      tabIndex,\n      'aria-pressed': isDragging && role === defaultRole ? true : undefined,\n      'aria-roledescription': roleDescription,\n      'aria-describedby': ariaDescribedById.draggable,\n    },\n    droppableRects,\n    isDragging,\n    listeners: disabled ? undefined : listeners,\n    node,\n    over,\n    setNodeRef,\n    transform,\n  };\n}\n","import {ContextType, useContext} from 'react';\nimport {Context} from '../store';\n\nexport function useDndContext() {\n  return useContext(Context);\n}\n\nexport type UseDndContextReturnValue = ContextType<typeof Context>;\n","import {useContext, useEffect, useRef} from 'react';\nimport {useIsomorphicLayoutEffect, useNodeRef} from '@dnd-kit/utilities';\n\nimport {Context, Action, Data} from '../store';\nimport type {LayoutRect} from '../types';\n\nexport interface UseDroppableArguments {\n  id: string;\n  disabled?: boolean;\n  data?: Data;\n}\n\nconst defaultData: Data = {};\n\nexport function useDroppable({\n  data = defaultData,\n  disabled = false,\n  id,\n}: UseDroppableArguments) {\n  const {dispatch, over} = useContext(Context);\n  const rect = useRef<LayoutRect | null>(null);\n  const [nodeRef, setNodeRef] = useNodeRef();\n  const dataRef = useRef(data);\n\n  useIsomorphicLayoutEffect(() => {\n    if (dataRef.current !== data) {\n      dataRef.current = data;\n    }\n  }, [data]);\n\n  useIsomorphicLayoutEffect(\n    () => {\n      dispatch({\n        type: Action.RegisterDroppable,\n        element: {\n          id,\n          disabled,\n          node: nodeRef,\n          rect,\n          data: dataRef,\n        },\n      });\n\n      return () =>\n        dispatch({\n          type: Action.UnregisterDroppable,\n          id,\n        });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [id]\n  );\n\n  useEffect(\n    () => {\n      dispatch({\n        type: Action.SetDroppableDisabled,\n        id,\n        disabled,\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [disabled]\n  );\n\n  return {\n    rect,\n    isOver: over?.id === id,\n    node: nodeRef,\n    over,\n    setNodeRef,\n  };\n}\n","import React, {useContext, useEffect, useRef} from 'react';\nimport {CSS} from '@dnd-kit/utilities';\n\nimport {getRelativeTransformOrigin} from '../../utilities';\nimport {applyModifiers, Modifiers} from '../../modifiers';\nimport {ActiveDraggableContext} from '../DndContext';\nimport {useDndContext} from '../../hooks';\nimport {useDerivedTransform, useDropAnimation, DropAnimation} from './hooks';\n\ntype TransitionGetter = (\n  activatorEvent: Event | null\n) => React.CSSProperties['transition'] | undefined;\n\nexport interface Props {\n  adjustScale?: boolean;\n  children?: React.ReactNode;\n  className?: string;\n  dropAnimation?: DropAnimation | null | undefined;\n  style?: React.CSSProperties;\n  transition?: string | TransitionGetter;\n  modifiers?: Modifiers;\n  wrapperElement?: keyof JSX.IntrinsicElements;\n  zIndex?: number;\n}\n\nconst defaultTransition: TransitionGetter = (activatorEvent) => {\n  const isKeyboardActivator = activatorEvent instanceof KeyboardEvent;\n\n  return isKeyboardActivator ? 'transform 250ms ease' : undefined;\n};\n\nconst defaultDropAnimation: DropAnimation = {\n  duration: 250,\n  easing: 'ease',\n};\n\nexport const DragOverlay = React.memo(\n  ({\n    adjustScale = false,\n    children,\n    dropAnimation = defaultDropAnimation,\n    transition = defaultTransition,\n    modifiers,\n    wrapperElement = 'div',\n    className,\n    zIndex = 999,\n  }: Props) => {\n    const {\n      active,\n      activeNodeRect,\n      activeNodeClientRect,\n      containerNodeRect,\n      draggableNodes,\n      activatorEvent,\n      overlayNode,\n      scrollableAncestors,\n      scrollableAncestorRects,\n      windowRect,\n    } = useDndContext();\n    const transform = useContext(ActiveDraggableContext);\n    const modifiedTransform = applyModifiers(modifiers, {\n      transform,\n      activeNodeRect: activeNodeClientRect,\n      overlayNodeRect: overlayNode.rect,\n      draggingNodeRect: overlayNode.rect,\n      containerNodeRect,\n      scrollableAncestors,\n      scrollableAncestorRects,\n      windowRect,\n    });\n    const derivedTransform = useDerivedTransform(\n      modifiedTransform,\n      activeNodeRect,\n      overlayNode.nodeRef.current\n    );\n    const isDragging = active !== null;\n    const intermediateTransform = derivedTransform ?? modifiedTransform;\n    const finalTransform = adjustScale\n      ? intermediateTransform\n      : {\n          ...intermediateTransform,\n          scaleX: 1,\n          scaleY: 1,\n        };\n    const style: React.CSSProperties | undefined = activeNodeRect\n      ? {\n          position: 'fixed',\n          width: activeNodeRect.width,\n          height: activeNodeRect.height,\n          top: activeNodeRect.top,\n          left: activeNodeRect.left,\n          zIndex,\n          transform: CSS.Transform.toString(finalTransform),\n          touchAction: 'none',\n          pointerEvents: 'none',\n          transformOrigin:\n            adjustScale && activatorEvent\n              ? getRelativeTransformOrigin(\n                  activatorEvent as MouseEvent | KeyboardEvent | TouchEvent,\n                  activeNodeRect\n                )\n              : undefined,\n          transition: derivedTransform\n            ? undefined\n            : typeof transition === 'function'\n            ? transition(activatorEvent)\n            : transition,\n        }\n      : undefined;\n    const attributes = isDragging\n      ? {\n          style,\n          children,\n          className,\n          transform: finalTransform,\n        }\n      : undefined;\n    const attributesSnapshot = useRef(attributes);\n    const derivedAttributes = attributes ?? attributesSnapshot.current;\n    const {children: finalChildren, transform: _, ...otherAttributes} =\n      derivedAttributes ?? {};\n    const prevActive = useRef(active);\n    const dropAnimationComplete = useDropAnimation({\n      animate: Boolean(dropAnimation && prevActive.current && !active),\n      adjustScale,\n      activeId: prevActive.current,\n      draggableNodes,\n      duration: dropAnimation?.duration,\n      easing: dropAnimation?.easing,\n      node: overlayNode.nodeRef.current,\n      transform: attributesSnapshot.current?.transform,\n    });\n    const shouldRender = Boolean(\n      finalChildren && (children || (dropAnimation && !dropAnimationComplete))\n    );\n\n    useEffect(() => {\n      if (prevActive.current !== active) {\n        prevActive.current = active;\n      }\n\n      if (active && attributesSnapshot.current !== attributes) {\n        attributesSnapshot.current = attributes;\n      }\n    }, [active, attributes]);\n\n    useEffect(() => {\n      if (dropAnimationComplete) {\n        attributesSnapshot.current = undefined;\n      }\n    }, [dropAnimationComplete]);\n\n    if (!shouldRender) {\n      return null;\n    }\n\n    return React.createElement(\n      wrapperElement,\n      {\n        ...otherAttributes,\n        ref: overlayNode.setRef,\n      },\n      finalChildren\n    );\n  }\n);\n","import {useRef} from 'react';\nimport {Transform, useLazyMemo} from '@dnd-kit/utilities';\n\nimport type {ViewRect} from '../../../types';\n\nexport function useDerivedTransform(\n  transform: Transform,\n  rect: ViewRect | null,\n  overlayNode: HTMLElement | null\n) {\n  const prevRect = useRef(rect);\n\n  return useLazyMemo<Transform | undefined>(\n    (previousValue) => {\n      const initial = prevRect.current;\n\n      if (rect !== initial) {\n        if (rect && initial) {\n          const layoutHasChanged =\n            initial.left !== rect.left || initial.top !== rect.top;\n\n          if (layoutHasChanged && !previousValue) {\n            const overlayNodeRect = overlayNode?.getBoundingClientRect();\n\n            if (overlayNodeRect) {\n              const delta = {\n                ...transform,\n                x: overlayNodeRect.left - rect.left,\n                y: overlayNodeRect.top - rect.top,\n              };\n\n              return delta;\n            }\n          }\n        }\n\n        prevRect.current = rect;\n      }\n\n      return undefined;\n    },\n    [rect, transform, overlayNode]\n  );\n}\n","import {useEffect, useState} from 'react';\nimport {CSS, Transform, useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\nimport {UniqueIdentifier} from '../../../types';\nimport {DraggableNodes} from '../../../store';\nimport {getViewRect} from '../../../utilities';\n\nexport interface DropAnimation {\n  duration: number;\n  easing: string;\n}\n\ninterface Arguments {\n  activeId: UniqueIdentifier | null;\n  animate: boolean;\n  adjustScale: boolean;\n  draggableNodes: DraggableNodes;\n  duration: DropAnimation['duration'] | undefined;\n  easing: DropAnimation['easing'] | undefined;\n  node: HTMLElement | null;\n  transform: Transform | undefined;\n}\n\nexport function useDropAnimation({\n  animate,\n  adjustScale,\n  activeId,\n  draggableNodes,\n  duration,\n  easing,\n  node,\n  transform,\n}: Arguments) {\n  const [dropAnimationComplete, setDropAnimationComplete] = useState(false);\n\n  useEffect(() => {\n    const shouldPerformDropAnimation = transform\n      ? Boolean(Math.abs(transform.x) || Math.abs(transform.y))\n      : false;\n\n    if (\n      !animate ||\n      !activeId ||\n      !easing ||\n      !duration ||\n      !shouldPerformDropAnimation\n    ) {\n      if (animate) {\n        setDropAnimationComplete(true);\n      }\n\n      return;\n    }\n\n    requestAnimationFrame(() => {\n      const finalNode = draggableNodes[activeId]?.current;\n\n      if (transform && node && finalNode && finalNode.parentNode !== null) {\n        const fromNode = node.children.length > 1 ? node : node.children[0];\n\n        if (fromNode) {\n          const from = fromNode.getBoundingClientRect();\n          const to = getViewRect(finalNode);\n          const delta = {\n            x: from.left - to.left,\n            y: from.top - to.top,\n          };\n\n          if (Math.abs(delta.x) || Math.abs(delta.y)) {\n            const scaleDelta = {\n              scaleX: adjustScale\n                ? (to.width * transform.scaleX) / from.width\n                : 1,\n              scaleY: adjustScale\n                ? (to.height * transform.scaleY) / from.height\n                : 1,\n            };\n            const finalTransform = CSS.Transform.toString({\n              x: transform.x - delta.x,\n              y: transform.y - delta.y,\n              ...scaleDelta,\n            });\n            const originalOpacity = finalNode.style.opacity;\n\n            finalNode.style.opacity = '0';\n            node\n              .animate(\n                [\n                  {\n                    transform: CSS.Transform.toString(transform),\n                  },\n                  {\n                    transform: finalTransform,\n                  },\n                ],\n                {\n                  easing,\n                  duration,\n                }\n              )\n              .finished.then(() => {\n                setDropAnimationComplete(true);\n\n                if (finalNode) {\n                  finalNode.style.opacity = originalOpacity;\n                }\n              });\n            return;\n          }\n        }\n      }\n\n      setDropAnimationComplete(true);\n    });\n  }, [\n    animate,\n    activeId,\n    adjustScale,\n    draggableNodes,\n    duration,\n    easing,\n    node,\n    transform,\n  ]);\n\n  useIsomorphicLayoutEffect(() => {\n    if (dropAnimationComplete) {\n      setDropAnimationComplete(false);\n    }\n  }, [dropAnimationComplete]);\n\n  return dropAnimationComplete;\n}\n","import {getMinValueIndex} from '../other';\nimport {centerOfRectangle, distanceBetween} from '../coordinates';\nimport type {CollisionDetection} from './types';\n\n/**\n * Returns the closest rectangle from an array of rectangles to the center of a given\n * rectangle.\n */\nexport const closestCenter: CollisionDetection = (rects, rect) => {\n  const centerRect = centerOfRectangle(rect, rect.left, rect.top);\n  const distances = rects.map(([_, rect]) =>\n    distanceBetween(centerOfRectangle(rect), centerRect)\n  );\n\n  const minValueIndex = getMinValueIndex(distances);\n\n  return rects[minValueIndex] ? rects[minValueIndex][0] : null;\n};\n","import {useMemo} from 'react';\n\nimport type {SyntheticEventName, UniqueIdentifier} from '../../types';\n\nexport type SyntheticListener = {\n  eventName: SyntheticEventName;\n  handler: (event: React.SyntheticEvent, id: UniqueIdentifier) => void;\n};\n\nexport type SyntheticListeners = SyntheticListener[];\n\nexport type SyntheticListenerMap = Record<string, Function>;\n\nexport function useSyntheticListeners(\n  listeners: SyntheticListeners,\n  id: string\n): SyntheticListenerMap {\n  return useMemo(() => {\n    return listeners.reduce<SyntheticListenerMap>(\n      (acc, {eventName, handler}) => {\n        acc[eventName] = (event: React.SyntheticEvent) => {\n          handler(event, id);\n        };\n\n        return acc;\n      },\n      {} as SyntheticListenerMap\n    );\n  }, [listeners, id]);\n}\n","import {useMemo} from 'react';\n\nimport {Sensor, SensorDescriptor, SensorOptions} from './types';\n\nexport function useSensor<T extends SensorOptions>(\n  sensor: Sensor<T>,\n  options?: T\n): SensorDescriptor<T> {\n  return useMemo(\n    () => ({\n      sensor,\n      options: options ?? ({} as T),\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [sensor, options]\n  );\n}\n","import {useMemo} from 'react';\nimport {SensorDescriptor, SensorOptions} from './types';\n\nexport function useSensors(\n  ...sensors: (SensorDescriptor<any> | undefined | null)[]\n): SensorDescriptor<SensorOptions>[] {\n  return useMemo(\n    () =>\n      [...sensors].filter(\n        (sensor): sensor is SensorDescriptor<any> => sensor != null\n      ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [...sensors]\n  );\n}\n"],"names":["Action","screenReaderInstructions","draggable","defaultAnnouncements","onDragStart","id","onDragOver","overId","onDragEnd","onDragCancel","getMinValueIndex","array","getValueIndex","value","tracked","comparator","length","index","i","noop","Context","createContext","activatorEvent","active","activeNode","activeNodeRect","activeNodeClientRect","activators","ariaDescribedById","overlayNode","nodeRef","current","rect","setRef","containerNodeRect","dispatch","draggableNodes","droppableRects","Map","droppableContainers","over","scrollableAncestors","scrollableAncestorRects","recomputeLayouts","windowRect","willRecomputeLayouts","centerOfRectangle","left","top","offsetLeft","offsetTop","x","width","y","height","defaultCoordinates","Object","freeze","distanceBetween","p1","p2","Math","sqrt","pow","getEventCoordinates","event","window","TouchEvent","isTouchEvent","touches","clientX","clientY","changedTouches","MouseEvent","type","includes","isMouseEvent","getRelativeTransformOrigin","KeyboardEvent","eventCoordinates","createRectAdjustmentFn","modifier","viewRect","adjustments","reduce","acc","adjustment","bottom","right","Direction","getAdjustedRect","getScrollableAncestors","element","scrollParents","findScrollableAncestors","node","Document","scrollingElement","push","HTMLElement","SVGElement","computedStyle","getComputedStyle","overflowRegex","find","property","test","isScrollable","elem","currentElement","fixed","position","document","body","_currentElement","parentElement","isFixed","parentNode","getScrollableElement","canUseDOM","getScrollCoordinates","Window","scrollX","scrollY","scrollLeft","scrollTop","getScrollPosition","scrollingContainer","scrollElementRect","innerWidth","innerHeight","getBoundingClientRect","getScrollElementRect","minScroll","maxScroll","scrollWidth","scrollHeight","isTop","isLeft","isBottom","isRight","getScrollDirectionAndSpeed","scrollContainer","scrollContainerRect","acceleration","finalScrollContainerRect","clientWidth","clientHeight","direction","speed","Backward","abs","Forward","getScrollOffsets","add","getElementLayout","offsetWidth","offsetHeight","getEdgeOffset","parent","offset","nodeOffset","offsetParent","getViewRect","scrollOffsets","Array","from","Set","isViewRect","entry","cornersOfRectangle","rectIntersection","entries","target","intersections","map","max","min","intersectionArea","Number","toFixed","getIntersectionRatio","maxValueIndex","getOwnerDocument","ownerDocument","getInitialState","initialCoordinates","lastEvent","nodes","translate","droppable","containers","reducer","state","action","DragStart","DragMove","coordinates","DragEnd","DragCancel","RegisterDroppable","SetDroppableDisabled","disabled","UnregisterDroppable","elements","Accessibility","announcements","activeId","hiddenTextDescribedById","useAnnouncement","announce","useRef","liveRegionId","useUniqueId","useEffect","announcement","previousActiveId","previousOverId","undefined","createPortal","React","HiddenText","LiveRegion","defaultValue","useClientRect","createUseRectFn","useClientRects","createUseRectsFn","useViewRect","getRect","forceRecompute","previousElement","useLazyMemo","previousValue","previousElements","KeyboardCode","Listeners","eventName","handler","options","addEventListener","listeners","removeAll","forEach","_this","removeEventListener","EventName","defaultKeyboardCodes","start","Space","Enter","cancel","Esc","end","defaultKeyboardCoordinateGetter","currentCoordinates","code","Right","Left","Down","Up","KeyboardSensor","props","handleKeyDown","this","bind","attach","handleStart","setTimeout","onStart","Error","context","keyboardCodes","coordinateGetter","scrollBehavior","handleEnd","handleCancel","newCoordinates","scrollDelta","coordinatesDelta","getCoordinatesDelta","clampedCoordinates","canScrollX","canScrollY","scrollBy","behavior","handleMove","getAdjustedCoordinates","onMove","preventDefault","onEnd","detach","onCancel","isDistanceConstraint","constraint","Boolean","isDelayConstraint","nativeEvent","AbstractPointerSensor","events","listenerTarget","handleKeydown","activationConstraint","move","name","Keydown","timeoutId","delay","clearTimeout","activated","delta","combinedDelta","tolerance","distance","cancelable","PointerSensor","_AbstractPointerSenso","isPrimary","button","MouseButton","MouseSensor","RightClick","TouchSensor","applyModifiers","modifiers","transform","args","accumulator","defaultSensors","sensor","ActiveDraggableContext","scaleX","scaleY","DndContext","memo","rect1","rect2","previousNode","ancestors","autoScroll","children","sensors","collisionDetection","defaultScreenReaderInstructions","store","useReducer","activeRef","useState","activeSensor","setActiveSensor","setActivatorEvent","latestProps","draggableDescribedById","setWillRecomputeLayouts","containersRef","useCallback","layoutRectMap","values","container","set","createLayoutRectMap","useLayoutRectMap","draggableNode","cachedNode","useCachedNode","getDraggableNode","initialActiveNodeRectRef","nodeRectDelta","scrollAdjustedTransalte","translatedRect","overNode","_droppableContainers$2","getDroppableNode","defaultView","detectedScrollElement","useMemo","elementFromPoint","useFindElementFromPoint","useNodeRef","overlayNodeRef","setOverlayNodeRef","overlayNodeRect","modifiedTranslate","draggingNodeRect","scrolllAdjustment","scrollCoordinates","setScrollCoordinates","prevElements","handleScroll","cleanup","scrollableElement","passive","filter","useScrollOffsets","collisionRect","overNodeRect","getLayoutRect","adjustScale","sensorContext","instantiateSensor","sensorInstance","Sensor","createHandler","getSyntheticHandler","sensorActivators","activator","useCombineActivators","dndKit","defaultPrevented","capturedBy","useIsomorphicLayoutEffect","onDragMove","draggingRect","interval","useInterval","setAutoScrollInterval","clearAutoScrollInterval","scrollSpeed","scrollDirection","scrollContainerRef","indexOf","scrolllContainerRect","useAutoScroller","autoScrollEnabled","contextValue","Provider","get","NullContext","useDndContext","useContext","defaultData","defaultTransition","defaultDropAnimation","duration","easing","DragOverlay","dropAnimation","transition","wrapperElement","className","zIndex","modifiedTransform","derivedTransform","prevRect","initial","useDerivedTransform","isDragging","intermediateTransform","finalTransform","style","CSS","Transform","toString","touchAction","pointerEvents","transformOrigin","attributes","attributesSnapshot","derivedAttributes","finalChildren","_","prevActive","dropAnimationComplete","animate","setDropAnimationComplete","shouldPerformDropAnimation","requestAnimationFrame","finalNode","_draggableNodes$activ","fromNode","to","originalOpacity","opacity","finished","then","useDropAnimation","_attributesSnapshot$c","shouldRender","createElement","otherAttributes","ref","rects","centerRect","distances","minValueIndex","corners","entryCorners","corner","role","roleDescription","tabIndex","setNodeRef","useSyntheticListeners","data","dataRef","isOver"],"mappings":"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"}